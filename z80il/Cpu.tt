<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<# 
Dictionary<int, string> RegisterMap = new Dictionary<int, string>{
    {0, "b"},
    {1, "c"},
    {2, "d"},
    {3, "e"},
    {4, "h"},
    {5, "l"},
    {7, "a"},
};

Dictionary<int, string> Register16Map = new Dictionary<int, string>{
    {0, "bc"},
    {1, "de"},
    {2, "hl"},
    {3, "sp"}
};

Dictionary<int, string> Register16Map2 = new Dictionary<int, string>{
    {0, "bc"},
    {1, "de"},
    {2, "hl"},
    {3, "af"}
};

Dictionary<int, string> Conditions = new Dictionary<int, string>{
    {0, "nz"},
    {1, "z"},
    {2, "nc"},
    {3, "c"},
    {4, "po"},
    {5, "pe"},
    {6, "p"},
    {7, "m"}
};

string[] All8BitRegs = new string[11] {
    "a", "b", "c", "d", "e", "h", "l", "ixh", "ixl", "iyh", "iyl"
};

string[] Lim8BitRegs = new string[7] {
    "a", "b", "c", "d", "e", "h", "l"
};

Dictionary<string, int> Prefixes = new Dictionary<string, int>{
    {"ix", 0xDD},
    {"iy", 0xFD}
};

int opCode;
string opFuncName, dasm;

#>
using System;

namespace Z80 {
    public class Cpu: BaseCpu {

        public Cpu(IMemory mem, IPort port) : base(mem, port) {
            
        }

        protected override void CreateTables() {
            base.CreateTables();

            // LD r, r'
<#  
    foreach (var dst in RegisterMap) {
        foreach (var src in RegisterMap) { 
            opCode = 0x40 | (dst.Key << 3) | src.Key;
            var srcRegName = src.Value;
            var dstRegName = dst.Value;
            opFuncName = string.Format("ld_{0}_{1}", dstRegName, srcRegName);
            dasm = string.Format("ld {0}, {1}", dstRegName, srcRegName);
#>
            opcodeTable.entries[<#= opCode #>] = new OpcodeTableEntry(<#= opFuncName #>, "<#= dasm #>", new ArgType[]{});
<#  
        }
    } 
#>
            // NOP
            opcodeTable.entries[0x00] = new OpcodeTableEntry(nop, "nop", new ArgType[]{});

            // LD r, n
<#  
    foreach (var dst in RegisterMap) {
        opCode = 0x06 | (dst.Key << 3);
        opFuncName = string.Format("ld_{0}_n", dst.Value);
        dasm = string.Format("ld {0}, {{0}}", dst.Value);
#>
            opcodeTable.entries[<#= opCode #>] = new OpcodeTableEntry(<#= opFuncName #>, "<#= dasm #>", new ArgType[]{ArgType.Byte});
<#  
    }
#>
            opcodeTableDD.entries[0x26] = new OpcodeTableEntry(ld_ixh_n, "ld ixh, {0}", new ArgType[]{ArgType.Byte});
            opcodeTableDD.entries[0x2e] = new OpcodeTableEntry(ld_ixl_n, "ld ixl, {0}", new ArgType[]{ArgType.Byte});
            opcodeTableFD.entries[0x26] = new OpcodeTableEntry(ld_iyh_n, "ld iyh, {0}", new ArgType[]{ArgType.Byte});
            opcodeTableFD.entries[0x2e] = new OpcodeTableEntry(ld_iyl_n, "ld iyl, {0}", new ArgType[]{ArgType.Byte});
            
            // LD r, (HL)
<#
    foreach (var dst in RegisterMap) {
        opCode = 0x46 | (dst.Key << 3);
        opFuncName = string.Format("ld_{0}__hl_", dst.Value);
        dasm = string.Format("ld {0}, (hl)", dst.Value);
#>
            opcodeTable.entries[<#= opCode #>] = new OpcodeTableEntry(<#= opFuncName #>, "<#= dasm #>", new ArgType[]{});
<#
    }
#>

            // LD (HL), r
<#
    foreach (var src in RegisterMap) {
        opCode = 0x70 | src.Key;
        opFuncName = string.Format("ld__hl__{0}", src.Value);
        dasm = string.Format("ld (hl), {0}", src.Value);
#>
            opcodeTable.entries[<#= opCode #>] = new OpcodeTableEntry(<#= opFuncName #>, "<#= dasm #>", new ArgType[]{});
<#
    }
#>
            opcodeTable.entries[0x36] = new OpcodeTableEntry(ld__hl__n, "ld (hl), n", new ArgType[]{ArgType.Byte});
            
            // LD (DE/BC), A; LD A, (DE/BC)
            opcodeTable.entries[0x0A] = new OpcodeTableEntry(ld_a__bc_, "ld a, (bc)", new ArgType[]{});
            opcodeTable.entries[0x1A] = new OpcodeTableEntry(ld_a__de_, "ld a, (de)", new ArgType[]{});
            opcodeTable.entries[0x02] = new OpcodeTableEntry(ld__bc__a, "ld (bc), a", new ArgType[]{});
            opcodeTable.entries[0x12] = new OpcodeTableEntry(ld__de__a, "ld (de), a", new ArgType[]{});
            
            // LD A, (nn); LD (nn), A
            opcodeTable.entries[0x3A] = new OpcodeTableEntry(ld_a__nn_, "ld a, ({0})", new ArgType[]{ArgType.Word});
            opcodeTable.entries[0x32] = new OpcodeTableEntry(ld__nn__a, "ld ({0}), a", new ArgType[]{ArgType.Word});
            
            // LD A, R/I; LD R/I, A
            opcodeTableED.entries[0x57] = new OpcodeTableEntry(ld_a_i, "ld a, i", new ArgType[]{});
            opcodeTableED.entries[0x5F] = new OpcodeTableEntry(ld_a_r, "ld a, r", new ArgType[]{});
            opcodeTableED.entries[0x47] = new OpcodeTableEntry(ld_i_a, "ld i, a", new ArgType[]{});
            opcodeTableED.entries[0x4F] = new OpcodeTableEntry(ld_r_a, "ld r, a", new ArgType[]{});
            
            // Indexed 8 bit load
<#
    foreach (var dst in RegisterMap) {
        opCode = 0x46 | (dst.Key << 3);
        foreach (var iReg in Prefixes) {
            opFuncName = string.Format("ld_{0}__{1}_d_", dst.Value, iReg.Key);
            dasm = string.Format("ld {0}, ({1}+{{0}})", dst.Value, iReg.Key);
#>
            opcodeTable.entries[<#= iReg.Value #>].nextTable.entries[<#= opCode #>] = 
                new OpcodeTableEntry(<#= opFuncName #>, "<#= dasm #>", new ArgType[]{ArgType.Offset});
<#
        }
    }
#>
<#
    foreach (var src in RegisterMap) {
        opCode = 0x70 | src.Key;
        foreach (var iReg in Prefixes) {
            opFuncName = string.Format("ld__{1}_d__{0}", src.Value, iReg.Key);
            dasm = string.Format("ld ({1}+{{0}}), {0}", src.Value, iReg.Key);
#>
            opcodeTable.entries[<#= iReg.Value #>].nextTable.entries[<#= opCode #>] = 
                new OpcodeTableEntry(<#= opFuncName #>, "<#= dasm #>", new ArgType[]{ArgType.Offset});
<#
        }
    }
#>
<#
    foreach (var iReg in Prefixes) {
        opFuncName = string.Format("ld__{0}_d__n", iReg.Key);
        dasm = string.Format("ld ({0}+{{0}}), {{1}}", iReg.Key);
#>
            opcodeTable.entries[<#= iReg.Value #>].nextTable.entries[0x36] =
                new OpcodeTableEntry(<#= opFuncName #>, "<#= dasm #>", new ArgType[]{ArgType.Offset, ArgType.Byte});
<#    
    }
#>

            // LD dd, nn
<#
    foreach (var rCode in Register16Map) {
        opCode = 1 | (rCode.Key << 4);
        opFuncName = string.Format("ld_{0}_nn", rCode.Value);
        dasm = string.Format("ld {0}, {{0}}", rCode.Value);
#>
            opcodeTable.entries[<#= opCode #>] = new OpcodeTableEntry(<#= opFuncName #>, "<#= dasm #>", new ArgType[]{ArgType.Word});
<#
    }
#>

<#
    foreach (var iReg in Prefixes) {
        opFuncName = string.Format("ld_{0}_nn", iReg.Key);
        dasm = string.Format("ld {0}, {{0}}", iReg.Key);
#>
            opcodeTable.entries[<#= iReg.Value #>].nextTable.entries[0x21] =
                new OpcodeTableEntry(<#= opFuncName #>, "<#= dasm #>", new ArgType[]{ArgType.Word});
<#
    }
#>

            // LD dd, (nn)
<#
    foreach (var rCode in Register16Map) {
        opCode = 0x4B | (rCode.Key << 4);
        opFuncName = string.Format("ld_{0}__nn_", rCode.Value);
        dasm = string.Format("ld {0}, ({{0}})", rCode.Value);
#>
            opcodeTableED.entries[<#= opCode #>] = new OpcodeTableEntry(<#= opFuncName #>, "<#= dasm #>", new ArgType[]{ArgType.Word});
<#
    }
#>

            opcodeTable.entries[0x2A] = new OpcodeTableEntry(ld_hl__nn_, "ld hl, ({0})", new ArgType[]{ArgType.Word});
<#
    foreach (var iReg in Prefixes) {
        opFuncName = string.Format("ld_{0}__nn_", iReg.Key);
        dasm = string.Format("ld {0}, ({{0}})", iReg.Key);
#>
            opcodeTable.entries[<#= iReg.Value #>].nextTable.entries[0x2A] =
                new OpcodeTableEntry(<#= opFuncName #>, "<#= dasm #>", new ArgType[]{ArgType.Word});
<#
    }
#>

            // LD (nn), dd
<#
    foreach (var rCode in Register16Map) {
        opCode = 0x43 | (rCode.Key << 4);
        opFuncName = string.Format("ld__nn__{0}", rCode.Value);
        dasm = string.Format("ld ({{0}}), {0}", rCode.Value);
#>
            opcodeTableED.entries[<#= opCode #>] = new OpcodeTableEntry(<#= opFuncName #>, "<#= dasm #>", new ArgType[]{ArgType.Word});
<#
    }
#>

            opcodeTable.entries[0x22] = new OpcodeTableEntry(ld__nn__hl, "ld ({0}), hl", new ArgType[]{ArgType.Word});
<#
    foreach (var iReg in Prefixes) {
        opFuncName = string.Format("ld__nn__{0}", iReg.Key);
        dasm = string.Format("ld ({{0}}), {0}", iReg.Key);
#>
            opcodeTable.entries[<#= iReg.Value #>].nextTable.entries[0x22] =
                new OpcodeTableEntry(<#= opFuncName #>, "<#= dasm #>", new ArgType[]{ArgType.Word});
<#
    }
#>
            opcodeTable.entries[0xF9] = new OpcodeTableEntry(ld_sp_hl, "ld sp, hl", new ArgType[]{});
            opcodeTableDD.entries[0xF9] = new OpcodeTableEntry(ld_sp_ix, "ld sp, ix", new ArgType[]{});
            opcodeTableFD.entries[0xF9] = new OpcodeTableEntry(ld_sp_iy, "ld sp, iy", new ArgType[]{});
            
            // PUSH qq / POP qq
<#
    foreach (var rCode in Register16Map2) {
        opCode = 0xC5 | (rCode.Key << 4);
        opFuncName = string.Format("push_{0}", rCode.Value);
        dasm = string.Format("push {0}", rCode.Value);
#>
            opcodeTable.entries[<#= opCode #>] = new OpcodeTableEntry(<#= opFuncName #>, "<#= dasm #>", new ArgType[]{});
<#  
        opCode = 0xC1 | (rCode.Key << 4);
        opFuncName = string.Format("pop_{0}", rCode.Value);
        dasm = string.Format("pop {0}", rCode.Value);
#>
            opcodeTable.entries[<#= opCode #>] = new OpcodeTableEntry(<#= opFuncName #>, "<#= dasm #>", new ArgType[]{});
<#
    }
#>
<#
    foreach (var iReg in Prefixes) {
        opFuncName = string.Format("push_{0}", iReg.Key);
        dasm = string.Format("push {0}", iReg.Key);
#>
            opcodeTable.entries[<#= iReg.Value #>].nextTable.entries[0xE5] =
                new OpcodeTableEntry(<#= opFuncName #>, "<#= dasm #>", new ArgType[]{});
<#
        opFuncName = string.Format("pop_{0}", iReg.Key);
        dasm = string.Format("pop {0}", iReg.Key);
#>
            opcodeTable.entries[<#= iReg.Value #>].nextTable.entries[0xE1] =
                new OpcodeTableEntry(<#= opFuncName #>, "<#= dasm #>", new ArgType[]{});
<#
    }
#>          
            // More stack ops  
            opcodeTable.entries[0xEB] = new OpcodeTableEntry(ex_de_hl, "ex de, hl", new ArgType[]{});
            opcodeTable.entries[0x08] = new OpcodeTableEntry(ex_af_af_, "ex af, af'", new ArgType[]{});
            opcodeTable.entries[0xD9] = new OpcodeTableEntry(exx, "exx", new ArgType[]{});
            opcodeTable.entries[0xE3] = new OpcodeTableEntry(ex__sp__hl, "ex (sp), hl", new ArgType[]{});
            opcodeTableDD.entries[0xE3] = new OpcodeTableEntry(ex__sp__ix, "ex (sp), ix", new ArgType[]{});
            opcodeTableFD.entries[0xE3] = new OpcodeTableEntry(ex__sp__iy, "ex (sp), iy", new ArgType[]{});
            
            // Block operations
            opcodeTableED.entries[0xA0] = new OpcodeTableEntry(ldi, "ldi", new ArgType[] { });
            opcodeTableED.entries[0xB0] = new OpcodeTableEntry(ldir, "ldir", new ArgType[] { });
            opcodeTableED.entries[0xA8] = new OpcodeTableEntry(ldd, "ldd", new ArgType[] { });
            opcodeTableED.entries[0xB8] = new OpcodeTableEntry(lddr, "lddr", new ArgType[] { });
            opcodeTableED.entries[0xA1] = new OpcodeTableEntry(cpi, "cpi", new ArgType[] { });
            opcodeTableED.entries[0xB1] = new OpcodeTableEntry(cpir, "cpir", new ArgType[] { });
            opcodeTableED.entries[0xA9] = new OpcodeTableEntry(cpd, "cpd", new ArgType[] { });
            opcodeTableED.entries[0xB9] = new OpcodeTableEntry(cpdr, "cpdr", new ArgType[] { });
<#
    foreach (var rCode in RegisterMap) {
        
        opCode = 0x80 | rCode.Key;
        opFuncName = string.Format("add_a_{0}", rCode.Value);
        dasm = string.Format("add a, {0}", rCode.Value);
#>
            opcodeTable.entries[<#= opCode #>] = new OpcodeTableEntry(<#= opFuncName #>, "<#= dasm #>", new ArgType[]{}); 
<#
        opCode = 0x88 | rCode.Key;
        opFuncName = string.Format("adc_a_{0}", rCode.Value);
        dasm = string.Format("adc a, {0}", rCode.Value);
#>
            opcodeTable.entries[<#= opCode #>] = new OpcodeTableEntry(<#= opFuncName #>, "<#= dasm #>", new ArgType[]{}); 
<#
        opCode = 0x90 | rCode.Key;
        opFuncName = string.Format("sub_a_{0}", rCode.Value);
        dasm = string.Format("sub {0}", rCode.Value);
#>
            opcodeTable.entries[<#= opCode #>] = new OpcodeTableEntry(<#= opFuncName #>, "<#= dasm #>", new ArgType[]{}); 
<#
        opCode = 0x98 | rCode.Key;
        opFuncName = string.Format("sbc_a_{0}", rCode.Value);
        dasm = string.Format("sbc a, {0}", rCode.Value);
#>
            opcodeTable.entries[<#= opCode #>] = new OpcodeTableEntry(<#= opFuncName #>, "<#= dasm #>", new ArgType[]{}); 
<# 
    }           
#>            
            opcodeTableDD.entries[0x84] = new OpcodeTableEntry(add_a_ixh, "add a, ixh", new ArgType[]{});
            opcodeTableDD.entries[0x85] = new OpcodeTableEntry(add_a_ixl, "add a, ixl", new ArgType[]{});
            opcodeTableFD.entries[0x84] = new OpcodeTableEntry(add_a_iyh, "add a, iyh", new ArgType[]{});
            opcodeTableFD.entries[0x85] = new OpcodeTableEntry(add_a_iyl, "add a, iyl", new ArgType[]{});
            
            opcodeTableDD.entries[0x8C] = new OpcodeTableEntry(adc_a_ixh, "adc a, ixh", new ArgType[]{});
            opcodeTableDD.entries[0x8D] = new OpcodeTableEntry(adc_a_ixl, "adc a, ixl", new ArgType[]{});
            opcodeTableFD.entries[0x8C] = new OpcodeTableEntry(adc_a_iyh, "adc a, iyh", new ArgType[]{});
            opcodeTableFD.entries[0x8D] = new OpcodeTableEntry(adc_a_iyl, "adc a, iyl", new ArgType[]{});

            opcodeTableDD.entries[0x94] = new OpcodeTableEntry(sub_a_ixh, "sub ixh", new ArgType[]{});
            opcodeTableDD.entries[0x95] = new OpcodeTableEntry(sub_a_ixl, "sub ixl", new ArgType[]{});
            opcodeTableFD.entries[0x94] = new OpcodeTableEntry(sub_a_iyh, "sub iyh", new ArgType[]{});
            opcodeTableFD.entries[0x95] = new OpcodeTableEntry(sub_a_iyl, "sub iyl", new ArgType[]{});
            
            opcodeTableDD.entries[0x9C] = new OpcodeTableEntry(sbc_a_ixh, "sbc a, ixh", new ArgType[]{});
            opcodeTableDD.entries[0x9D] = new OpcodeTableEntry(sbc_a_ixl, "sbc a, ixl", new ArgType[]{});
            opcodeTableFD.entries[0x9C] = new OpcodeTableEntry(sbc_a_iyh, "sbc a, iyh", new ArgType[]{});
            opcodeTableFD.entries[0x9D] = new OpcodeTableEntry(sbc_a_iyl, "sbc a, iyl", new ArgType[]{});
            
            opcodeTable.entries[0xC6] = new OpcodeTableEntry(add_a_n, "add a, {0}", new ArgType[]{ArgType.Byte});
            opcodeTable.entries[0xCE] = new OpcodeTableEntry(adc_a_n, "adc a, {0}", new ArgType[]{ArgType.Byte});
            opcodeTable.entries[0xD6] = new OpcodeTableEntry(sub_a_n, "sub {0}", new ArgType[]{ArgType.Byte});
            opcodeTable.entries[0xDE] = new OpcodeTableEntry(sbc_a_n, "sbc a, {0}", new ArgType[]{ArgType.Byte});

			opcodeTable.entries[0x86] = new OpcodeTableEntry(add_a__hl_, "add a, (hl)", new ArgType[]{});
			opcodeTableDD.entries[0x86] = new OpcodeTableEntry(add_a__ix_d_, "add a, (ix+{0})", new ArgType[]{ArgType.Offset});
			opcodeTableFD.entries[0x86] = new OpcodeTableEntry(add_a__iy_d_, "add a, (iy+{0})", new ArgType[]{ArgType.Offset});
			opcodeTable.entries[0x8E] = new OpcodeTableEntry(adc_a__hl_, "adc a, (hl)", new ArgType[]{});
			opcodeTableDD.entries[0x8E] = new OpcodeTableEntry(adc_a__ix_d_, "adc a, (ix+{0})", new ArgType[]{ArgType.Offset});
			opcodeTableFD.entries[0x8E] = new OpcodeTableEntry(adc_a__iy_d_, "adc a, (iy+{0})", new ArgType[]{ArgType.Offset});
			opcodeTable.entries[0x96] = new OpcodeTableEntry(sub_a__hl_, "sub (hl)", new ArgType[]{});
			opcodeTableDD.entries[0x96] = new OpcodeTableEntry(sub_a__ix_d_, "sub (ix+{0})", new ArgType[]{ArgType.Offset});
			opcodeTableFD.entries[0x96] = new OpcodeTableEntry(sub_a__iy_d_, "sub (iy+{0})", new ArgType[]{ArgType.Offset});
			opcodeTable.entries[0x9E] = new OpcodeTableEntry(sbc_a__hl_, "sbc a, (hl)", new ArgType[]{});
			opcodeTableDD.entries[0x9E] = new OpcodeTableEntry(sbc_a__ix_d_, "sbc a, (ix+{0})", new ArgType[]{ArgType.Offset});
			opcodeTableFD.entries[0x9E] = new OpcodeTableEntry(sbc_a__iy_d_, "sbc a, (iy+{0})", new ArgType[]{ArgType.Offset});

			// ADD HL, BC/DE/HL/SP
<#
	foreach (var rCode in Register16Map) {
		opCode = 0x09 | (rCode.Key << 4);
		opFuncName = string.Format("add_hl_{0}", rCode.Value);
		dasm = string.Format("add hl, {0}", rCode.Value);
#>
			opcodeTable.entries[<#= opCode #>] = new OpcodeTableEntry(<#= opFuncName #>, "<#= dasm #>", new ArgType[]{});
<#
		opCode = 0x4A | (rCode.Key << 4);
		opFuncName = string.Format("adc_hl_{0}", rCode.Value);
		dasm = string.Format("adc hl, {0}", rCode.Value);
#>
			opcodeTableED.entries[<#= opCode #>] = new OpcodeTableEntry(<#= opFuncName #>, "<#= dasm #>", new ArgType[]{});
<#
		opCode = 0x42 | (rCode.Key << 4);
		opFuncName = string.Format("sbc_hl_{0}", rCode.Value);
		dasm = string.Format("sbc hl, {0}", rCode.Value);
#>
			opcodeTableED.entries[<#= opCode #>] = new OpcodeTableEntry(<#= opFuncName #>, "<#= dasm #>", new ArgType[]{});
<#
		foreach (var iReg in Prefixes) {
			var sReg = rCode.Value == "hl" ? iReg.Key : rCode.Value;
			opFuncName = string.Format("add_{0}_{1}", iReg.Key, sReg);
			dasm = string.Format("add {0}, {1}", iReg.Key, sReg);
#>
			opcodeTable.entries[<#= iReg.Value #>].nextTable.entries[<#= opCode #>] = 
				new OpcodeTableEntry(<#= opFuncName #>, "<#= dasm #>", new ArgType[]{});
<#
		}
	}
    
    foreach (var rCode in RegisterMap) {
        opCode = 0xA0 | rCode.Key;
        opFuncName = string.Format("and_{0}", rCode.Value);
        dasm = string.Format("and {0}", rCode.Value);
#>
            opcodeTable.entries[<#= opCode #>] = new OpcodeTableEntry(<#= opFuncName #>, "<#= dasm #>", new ArgType[]{});
<#
        opCode = 0xB0 | rCode.Key;
        opFuncName = string.Format("or_{0}", rCode.Value);
        dasm = string.Format("or {0}", rCode.Value);
#>
            opcodeTable.entries[<#= opCode #>] = new OpcodeTableEntry(<#= opFuncName #>, "<#= dasm #>", new ArgType[]{});
<#
        opCode = 0xA8 | rCode.Key;
        opFuncName = string.Format("xor_{0}", rCode.Value);
        dasm = string.Format("xor {0}", rCode.Value);
#>
            opcodeTable.entries[<#= opCode #>] = new OpcodeTableEntry(<#= opFuncName #>, "<#= dasm #>", new ArgType[]{});
<#
        opCode = 0xB8 | rCode.Key;
        opFuncName = string.Format("cp_{0}", rCode.Value);
        dasm = string.Format("cp {0}", rCode.Value);
#>
            opcodeTable.entries[<#= opCode #>] = new OpcodeTableEntry(<#= opFuncName #>, "<#= dasm #>", new ArgType[]{});
<#
        opCode = 0x04 | (rCode.Key << 3);
        opFuncName = string.Format("inc_{0}", rCode.Value);
        dasm = string.Format("inc {0}", rCode.Value);
#>
            opcodeTable.entries[<#= opCode #>] = new OpcodeTableEntry(<#= opFuncName #>, "<#= dasm #>", new ArgType[]{});
<#
        opCode = 0x05 | (rCode.Key << 3);
        opFuncName = string.Format("dec_{0}", rCode.Value);
        dasm = string.Format("dec {0}", rCode.Value);
#>
            opcodeTable.entries[<#= opCode #>] = new OpcodeTableEntry(<#= opFuncName #>, "<#= dasm #>", new ArgType[]{});
<#
    }
#>

            opcodeTableDD.entries[0xA4] = new OpcodeTableEntry(and_ixh, "and ixh", new ArgType[]{});
            opcodeTableDD.entries[0xA5] = new OpcodeTableEntry(and_ixl, "and ixl", new ArgType[]{});
            opcodeTableFD.entries[0xA4] = new OpcodeTableEntry(and_iyh, "and iyh", new ArgType[]{});
            opcodeTableFD.entries[0xA5] = new OpcodeTableEntry(and_iyl, "and iyl", new ArgType[]{});

            opcodeTableDD.entries[0xB4] = new OpcodeTableEntry(or_ixh, "or ixh", new ArgType[]{});
            opcodeTableDD.entries[0xB5] = new OpcodeTableEntry(or_ixl, "or ixl", new ArgType[]{});
            opcodeTableFD.entries[0xB4] = new OpcodeTableEntry(or_iyh, "or iyh", new ArgType[]{});
            opcodeTableFD.entries[0xB5] = new OpcodeTableEntry(or_iyl, "or iyl", new ArgType[]{});

            opcodeTableDD.entries[0xAC] = new OpcodeTableEntry(xor_ixh, "xor ixh", new ArgType[]{});
            opcodeTableDD.entries[0xAD] = new OpcodeTableEntry(xor_ixl, "xor ixl", new ArgType[]{});
            opcodeTableFD.entries[0xAC] = new OpcodeTableEntry(xor_iyh, "xor iyh", new ArgType[]{});
            opcodeTableFD.entries[0xAD] = new OpcodeTableEntry(xor_iyl, "xor iyl", new ArgType[]{});
            
            opcodeTableDD.entries[0xBC] = new OpcodeTableEntry(cp_ixh, "cp ixh", new ArgType[]{});
            opcodeTableDD.entries[0xBD] = new OpcodeTableEntry(cp_ixl, "cp ixl", new ArgType[]{});
            opcodeTableFD.entries[0xBC] = new OpcodeTableEntry(cp_iyh, "cp iyh", new ArgType[]{});
            opcodeTableFD.entries[0xBD] = new OpcodeTableEntry(cp_iyl, "cp iyl", new ArgType[]{});

            opcodeTableDD.entries[0x25] = new OpcodeTableEntry(dec_ixh, "dec ixh", new ArgType[]{});
            opcodeTableDD.entries[0x2D] = new OpcodeTableEntry(dec_ixl, "dec ixl", new ArgType[]{});
            opcodeTableFD.entries[0x25] = new OpcodeTableEntry(dec_iyh, "dec iyh", new ArgType[]{});
            opcodeTableFD.entries[0x2D] = new OpcodeTableEntry(dec_iyl, "dec iyl", new ArgType[]{});
            
            opcodeTableDD.entries[0x24] = new OpcodeTableEntry(inc_ixh, "inc ixh", new ArgType[]{});
            opcodeTableDD.entries[0x2C] = new OpcodeTableEntry(inc_ixl, "inc ixl", new ArgType[]{});
            opcodeTableFD.entries[0x24] = new OpcodeTableEntry(inc_iyh, "inc iyh", new ArgType[]{});
            opcodeTableFD.entries[0x2C] = new OpcodeTableEntry(inc_iyl, "inc iyl", new ArgType[]{});
            
            opcodeTable.entries[0xE6] = new OpcodeTableEntry(and_n, "and {0}", new ArgType[]{ArgType.Byte});
            opcodeTable.entries[0xF6] = new OpcodeTableEntry(or_n, "or {0}", new ArgType[]{ArgType.Byte});
            opcodeTable.entries[0xEE] = new OpcodeTableEntry(xor_n, "xor {0}", new ArgType[]{ArgType.Byte});
            opcodeTable.entries[0xFE] = new OpcodeTableEntry(cp_n, "cp {0}", new ArgType[]{ArgType.Byte});
            
            opcodeTable.entries[0xA6] = new OpcodeTableEntry(and__hl_, "and (hl)", new ArgType[]{});
            opcodeTable.entries[0xB6] = new OpcodeTableEntry(or__hl_, "or (hl)", new ArgType[]{});
            opcodeTable.entries[0xAE] = new OpcodeTableEntry(xor__hl_, "xor (hl)", new ArgType[]{});
            opcodeTable.entries[0xBE] = new OpcodeTableEntry(cp__hl_, "cp (hl)", new ArgType[]{});
            opcodeTable.entries[0x34] = new OpcodeTableEntry(inc__hl_, "inc (hl)", new ArgType[]{});
            opcodeTable.entries[0x35] = new OpcodeTableEntry(dec__hl_, "dec (hl)", new ArgType[]{});
            
<#
    foreach (var iReg in Prefixes) {
#>
            opcodeTable.entries[<#= iReg.Value #>].nextTable.entries[0xA6] = 
                new OpcodeTableEntry(and__<#= iReg.Key #>_d_, "and (<#= iReg.Key #>+{0})", new ArgType[]{ArgType.Offset});
            opcodeTable.entries[<#= iReg.Value #>].nextTable.entries[0xB6] = 
                new OpcodeTableEntry(or__<#= iReg.Key #>_d_, "or (<#= iReg.Key #>+{0})", new ArgType[]{ArgType.Offset});
            opcodeTable.entries[<#= iReg.Value #>].nextTable.entries[0xAE] = 
                new OpcodeTableEntry(xor__<#= iReg.Key #>_d_, "xor (<#= iReg.Key #>+{0})", new ArgType[]{ArgType.Offset});
            opcodeTable.entries[<#= iReg.Value #>].nextTable.entries[0xBE] = 
                new OpcodeTableEntry(cp__<#= iReg.Key #>_d_, "cp (<#= iReg.Key #>+{0})", new ArgType[]{ArgType.Offset});
            opcodeTable.entries[<#= iReg.Value #>].nextTable.entries[0x34] = 
                new OpcodeTableEntry(inc__<#= iReg.Key #>_d_, "inc (<#= iReg.Key #>+{0})", new ArgType[]{ArgType.Offset});
            opcodeTable.entries[<#= iReg.Value #>].nextTable.entries[0x35] = 
                new OpcodeTableEntry(dec__<#= iReg.Key #>_d_, "dec (<#= iReg.Key #>+{0})", new ArgType[]{ArgType.Offset});
<#
    }
    
    foreach (var rCode in Register16Map) {
        opCode = 0x03 | (rCode.Key << 4);
        opFuncName = string.Format("inc_{0}", rCode.Value);
        dasm = string.Format("inc {0}", rCode.Value);
#>
            opcodeTable.entries[<#= opCode #>] = new OpcodeTableEntry(<#= opFuncName #>, "<#= dasm #>", new ArgType[]{});
<#
        opCode = 0x0B | (rCode.Key << 4);
        opFuncName = string.Format("dec_{0}", rCode.Value);
        dasm = string.Format("dec {0}", rCode.Value);
#>
            opcodeTable.entries[<#= opCode #>] = new OpcodeTableEntry(<#= opFuncName #>, "<#= dasm #>", new ArgType[]{});
<#
    }
    
    foreach (var iReg in Prefixes) {
#>
            opcodeTable.entries[<#= iReg.Value #>].nextTable.entries[0x23] = 
                new OpcodeTableEntry(inc_<#= iReg.Key #>, "inc <#= iReg.Key #>", new ArgType[]{});
            opcodeTable.entries[<#= iReg.Value #>].nextTable.entries[0x2B] = 
                new OpcodeTableEntry(dec_<#= iReg.Key #>, "dec <#= iReg.Key #>", new ArgType[]{});
        
<#
    }
#>            
            opcodeTable.entries[0x27] = new OpcodeTableEntry(daa, "daa", new ArgType[]{});
            opcodeTable.entries[0x2F] = new OpcodeTableEntry(cpl, "cpl", new ArgType[]{});
            opcodeTableED.entries[0x44] = new OpcodeTableEntry(neg, "neg", new ArgType[]{});
            opcodeTableED.entries[0x54] = new OpcodeTableEntry(neg, "neg", new ArgType[]{});
            opcodeTableED.entries[0x64] = new OpcodeTableEntry(neg, "neg", new ArgType[]{});
            opcodeTableED.entries[0x74] = new OpcodeTableEntry(neg, "neg", new ArgType[]{});
            opcodeTableED.entries[0x4C] = new OpcodeTableEntry(neg, "neg", new ArgType[]{});
            opcodeTableED.entries[0x5C] = new OpcodeTableEntry(neg, "neg", new ArgType[]{});
            opcodeTableED.entries[0x6C] = new OpcodeTableEntry(neg, "neg", new ArgType[]{});
            opcodeTableED.entries[0x7C] = new OpcodeTableEntry(neg, "neg", new ArgType[]{});
            opcodeTable.entries[0x3F] = new OpcodeTableEntry(ccf, "ccf", new ArgType[]{});
            opcodeTable.entries[0x37] = new OpcodeTableEntry(scf, "scf", new ArgType[]{});
            opcodeTable.entries[0x76] = new OpcodeTableEntry(halt, "halt", new ArgType[]{});
            opcodeTable.entries[0xF3] = new OpcodeTableEntry(di, "di", new ArgType[]{});
            opcodeTable.entries[0xFB] = new OpcodeTableEntry(ei, "ei", new ArgType[]{});
            
            opcodeTableED.entries[0x46] = new OpcodeTableEntry(im_0, "im 0", new ArgType[]{});
            opcodeTableED.entries[0x4E] = new OpcodeTableEntry(im_0, "im 0", new ArgType[]{});
            opcodeTableED.entries[0x66] = new OpcodeTableEntry(im_0, "im 0", new ArgType[]{});
            opcodeTableED.entries[0x6E] = new OpcodeTableEntry(im_0, "im 0", new ArgType[]{});
            opcodeTableED.entries[0x56] = new OpcodeTableEntry(im_1, "im 1", new ArgType[]{});
            opcodeTableED.entries[0x76] = new OpcodeTableEntry(im_1, "im 1", new ArgType[]{});
            opcodeTableED.entries[0x5E] = new OpcodeTableEntry(im_2, "im 2", new ArgType[]{});
            opcodeTableED.entries[0x7E] = new OpcodeTableEntry(im_2, "im 2", new ArgType[]{});
            
            // ROTATE AND SHIFT
            
            opcodeTable.entries[0x07] = new OpcodeTableEntry(rlca, "rlca", new ArgType[]{});
            opcodeTable.entries[0x17] = new OpcodeTableEntry(rla, "rla", new ArgType[]{});
            opcodeTable.entries[0x0F] = new OpcodeTableEntry(rrca, "rrca", new ArgType[]{});
            opcodeTable.entries[0x1F] = new OpcodeTableEntry(rra, "rra", new ArgType[]{});
            
            opcodeTable.entries[0x6F] = new OpcodeTableEntry(rld, "rld", new ArgType[]{});
            opcodeTable.entries[0x67] = new OpcodeTableEntry(rrd, "rrd", new ArgType[]{});
           
<#
    foreach (var rCode in RegisterMap) {
        opCode = rCode.Key;
        opFuncName = string.Format("rlc_{0}", rCode.Value);
        dasm = string.Format("rlc {0}", rCode.Value);
#>
            opcodeTableCB.entries[<#= opCode #>] = new OpcodeTableEntry(<#= opFuncName #>, "<#= dasm #>", new ArgType[]{});
<#
        opCode = 0x10 | rCode.Key;
        opFuncName = string.Format("rl_{0}", rCode.Value);
        dasm = string.Format("rl {0}", rCode.Value);
#>
            opcodeTableCB.entries[<#= opCode #>] = new OpcodeTableEntry(<#= opFuncName #>, "<#= dasm #>", new ArgType[]{});
<#
        opCode = 0x08 | rCode.Key;
        opFuncName = string.Format("rrc_{0}", rCode.Value);
        dasm = string.Format("rrc {0}", rCode.Value);
#>
            opcodeTableCB.entries[<#= opCode #>] = new OpcodeTableEntry(<#= opFuncName #>, "<#= dasm #>", new ArgType[]{});
<#
        opCode = 0x18 | rCode.Key;
        opFuncName = string.Format("rr_{0}", rCode.Value);
        dasm = string.Format("rr {0}", rCode.Value);
#>
            opcodeTableCB.entries[<#= opCode #>] = new OpcodeTableEntry(<#= opFuncName #>, "<#= dasm #>", new ArgType[]{});
<#
        opCode = 0x20 | rCode.Key;
        opFuncName = string.Format("sla_{0}", rCode.Value);
        dasm = string.Format("sla {0}", rCode.Value);
#>
            opcodeTableCB.entries[<#= opCode #>] = new OpcodeTableEntry(<#= opFuncName #>, "<#= dasm #>", new ArgType[]{});
<#
        opCode = 0x28 | rCode.Key;
        opFuncName = string.Format("sra_{0}", rCode.Value);
        dasm = string.Format("sra {0}", rCode.Value);
#>
            opcodeTableCB.entries[<#= opCode #>] = new OpcodeTableEntry(<#= opFuncName #>, "<#= dasm #>", new ArgType[]{});
<#
        opCode = 0x30 | rCode.Key;
        opFuncName = string.Format("sll_{0}", rCode.Value);
        dasm = string.Format("sll {0}", rCode.Value);
#>
            opcodeTableCB.entries[<#= opCode #>] = new OpcodeTableEntry(<#= opFuncName #>, "<#= dasm #>", new ArgType[]{});
<#
        opCode = 0x38 | rCode.Key;
        opFuncName = string.Format("srl_{0}", rCode.Value);
        dasm = string.Format("srl {0}", rCode.Value);
#>
            opcodeTableCB.entries[<#= opCode #>] = new OpcodeTableEntry(<#= opFuncName #>, "<#= dasm #>", new ArgType[]{});
<#
    }
#>

            opcodeTableCB.entries[0x06] = new OpcodeTableEntry(rlc__hl_, "rlc (hl)", new ArgType[]{});       
            opcodeTableCB.entries[0x16] = new OpcodeTableEntry(rl__hl_, "rl (hl)", new ArgType[]{});       
            opcodeTableCB.entries[0x0E] = new OpcodeTableEntry(rrc__hl_, "rrc (hl)", new ArgType[]{});       
            opcodeTableCB.entries[0x1E] = new OpcodeTableEntry(rr__hl_, "rr (hl)", new ArgType[]{});
            
            opcodeTableDDCB.entries[0x06] = new OpcodeTableEntry(rlc__ix_d_, "rlc (ix+{0})", new ArgType[]{ArgType.Offset});       
            opcodeTableDDCB.entries[0x16] = new OpcodeTableEntry(rl__ix_d_, "rl (ix+{0})", new ArgType[]{ArgType.Offset});       
            opcodeTableDDCB.entries[0x0E] = new OpcodeTableEntry(rrc__ix_d_, "rrc (ix+{0})", new ArgType[]{ArgType.Offset});       
            opcodeTableDDCB.entries[0x1E] = new OpcodeTableEntry(rr__ix_d_, "rr (ix+{0})", new ArgType[]{ArgType.Offset});  

            opcodeTableFDCB.entries[0x06] = new OpcodeTableEntry(rlc__iy_d_, "rlc (iy+{0})", new ArgType[]{ArgType.Offset});       
            opcodeTableFDCB.entries[0x16] = new OpcodeTableEntry(rl__iy_d_, "rl (iy+{0})", new ArgType[]{ArgType.Offset});       
            opcodeTableFDCB.entries[0x0E] = new OpcodeTableEntry(rrc__iy_d_, "rrc (iy+{0})", new ArgType[]{ArgType.Offset});       
            opcodeTableFDCB.entries[0x1E] = new OpcodeTableEntry(rr__iy_d_, "rr (iy+{0})", new ArgType[]{ArgType.Offset});  
            
            opcodeTableCB.entries[0x26] = new OpcodeTableEntry(sla__hl_, "sla (hl)", new ArgType[]{});       
            opcodeTableCB.entries[0x2E] = new OpcodeTableEntry(sra__hl_, "sra (hl)", new ArgType[]{});       
            opcodeTableCB.entries[0x36] = new OpcodeTableEntry(sll__hl_, "sll (hl)", new ArgType[]{});       
            opcodeTableCB.entries[0x3E] = new OpcodeTableEntry(srl__hl_, "srl (hl)", new ArgType[]{});

            opcodeTableDDCB.entries[0x26] = new OpcodeTableEntry(sla__ix_d_, "sla (ix+{0})", new ArgType[]{ArgType.Offset});       
            opcodeTableDDCB.entries[0x2E] = new OpcodeTableEntry(sra__ix_d_, "sra (ix+{0})", new ArgType[]{ArgType.Offset});       
            opcodeTableDDCB.entries[0x36] = new OpcodeTableEntry(sll__ix_d_, "sll (ix+{0})", new ArgType[]{ArgType.Offset});       
            opcodeTableDDCB.entries[0x3E] = new OpcodeTableEntry(srl__ix_d_, "srl (ix+{0})", new ArgType[]{ArgType.Offset});
                 
            opcodeTableFDCB.entries[0x26] = new OpcodeTableEntry(sla__iy_d_, "sla (iy+{0})", new ArgType[]{ArgType.Offset});       
            opcodeTableFDCB.entries[0x2E] = new OpcodeTableEntry(sra__iy_d_, "sra (iy+{0})", new ArgType[]{ArgType.Offset});       
            opcodeTableFDCB.entries[0x36] = new OpcodeTableEntry(sll__iy_d_, "sll (iy+{0})", new ArgType[]{ArgType.Offset});       
            opcodeTableFDCB.entries[0x3E] = new OpcodeTableEntry(srl__iy_d_, "srl (iy+{0})", new ArgType[]{ArgType.Offset});

            // BIT test
                        
<#
    for (var b = 0; b < 8; b++) {
        foreach (var rCode in RegisterMap) {
            opCode = 0x40 | (b << 3) | rCode.Key;
            opFuncName = string.Format("bit_{0}_{1}", b, rCode.Value);
            dasm = string.Format("bit {0}, {1}", b, rCode.Value);
#>
            opcodeTableCB.entries[<#= opCode #>] = new OpcodeTableEntry(<#= opFuncName #>, "<#= dasm #>", new ArgType[]{});
<#
        }
        opCode = 0x46 | (b << 3);
        opFuncName = string.Format("bit_{0}__hl_", b);
        dasm = string.Format("bit {0}, (hl)", b);
#>
            opcodeTableCB.entries[<#= opCode #>] = new OpcodeTableEntry(<#= opFuncName #>, "<#= dasm #>", new ArgType[]{});
<#
        for (var s = 0; s < 8; s++) {
            opCode = 0x40 | (b << 3) | s;
            opFuncName = string.Format("bit_{0}__ix_d_", b);
            dasm = string.Format("bit {0}, (ix+{{0}})", b);
#>
            opcodeTableDDCB.entries[<#= opCode #>] = new OpcodeTableEntry(<#= opFuncName #>, "<#= dasm #>", new ArgType[]{ArgType.Offset});
<#
        opFuncName = string.Format("bit_{0}__iy_d_", b);
        dasm = string.Format("bit {0}, (iy+{{0}})", b);
#>
            opcodeTableFDCB.entries[<#= opCode #>] = new OpcodeTableEntry(<#= opFuncName #>, "<#= dasm #>", new ArgType[]{ArgType.Offset});
<#
        }
    }
#>

            // SET / RES
            
<#
    for (var b = 0; b < 8; b++) {
        foreach (var rCode in RegisterMap) {
            opCode = 0xC0 | (b << 3) | rCode.Key;
            opFuncName = string.Format("set_{0}_{1}", b, rCode.Value);
            dasm = string.Format("set {0}, {1}", b, rCode.Value);
#>
            opcodeTableCB.entries[<#= opCode #>] = new OpcodeTableEntry(<#= opFuncName #>, "<#= dasm #>", new ArgType[]{});
<#
        }
        opCode = 0xC6 | (b << 3);
        opFuncName = string.Format("set_{0}__hl_", b);
        dasm = string.Format("set {0}, (hl)", b);
#>
            opcodeTableCB.entries[<#= opCode #>] = new OpcodeTableEntry(<#= opFuncName #>, "<#= dasm #>", new ArgType[]{});
<#
        opFuncName = string.Format("set_{0}__ix_d_", b);
        dasm = string.Format("set {0}, (ix+{{0}})", b);
#>
            opcodeTableDDCB.entries[<#= opCode #>] = new OpcodeTableEntry(<#= opFuncName #>, "<#= dasm #>", new ArgType[]{ArgType.Offset});
<#
        opFuncName = string.Format("set_{0}__iy_d_", b);
        dasm = string.Format("set {0}, (iy+{{0}})", b);
#>
            opcodeTableFDCB.entries[<#= opCode #>] = new OpcodeTableEntry(<#= opFuncName #>, "<#= dasm #>", new ArgType[]{ArgType.Offset});
<#
    }

    for (var b = 0; b < 8; b++) {
        foreach (var rCode in RegisterMap) {
            opCode = 0x80 | (b << 3) | rCode.Key;
            opFuncName = string.Format("res_{0}_{1}", b, rCode.Value);
            dasm = string.Format("res {0}, {1}", b, rCode.Value);
#>
            opcodeTableCB.entries[<#= opCode #>] = new OpcodeTableEntry(<#= opFuncName #>, "<#= dasm #>", new ArgType[]{});
<#
        }
        opCode = 0x86 | (b << 3);
        opFuncName = string.Format("res_{0}__hl_", b);
        dasm = string.Format("res {0}, (hl)", b);
#>
            opcodeTableCB.entries[<#= opCode #>] = new OpcodeTableEntry(<#= opFuncName #>, "<#= dasm #>", new ArgType[]{});
<#
        opFuncName = string.Format("res_{0}__ix_d_", b);
        dasm = string.Format("res {0}, (ix+{{0}})", b);
#>
            opcodeTableDDCB.entries[<#= opCode #>] = new OpcodeTableEntry(<#= opFuncName #>, "<#= dasm #>", new ArgType[]{ArgType.Offset});
<#
        opFuncName = string.Format("res_{0}__iy_d_", b);
        dasm = string.Format("res {0}, (iy+{{0}})", b);
#>
            opcodeTableFDCB.entries[<#= opCode #>] = new OpcodeTableEntry(<#= opFuncName #>, "<#= dasm #>", new ArgType[]{ArgType.Offset});
<#
    }
#>

            opcodeTable.entries[0xDB] = new OpcodeTableEntry(in_a__n_, "in a, ({0})", new ArgType[]{ArgType.Byte});
            opcodeTable.entries[0xD3] = new OpcodeTableEntry(out__n__a, "out ({0}), a", new ArgType[]{ArgType.Byte});
            
            opcodeTableED.entries[0x70] = new OpcodeTableEntry(in_f__c_, "in f, (c)", new ArgType[]{});
            opcodeTableED.entries[0x71] = new OpcodeTableEntry(out__c__0, "out (c), 0", new ArgType[]{});
<#
    foreach (var rCode in RegisterMap) {
        opCode = 0x40 | (rCode.Key << 3);
        opFuncName = string.Format("in_{0}__c_", rCode.Value);
        dasm = string.Format("in {0}, (c)", rCode.Value);
#>
            opcodeTableED.entries[<#= opCode #>] = new OpcodeTableEntry(<#= opFuncName #>, "<#= dasm #>", new ArgType[]{});
<#
            opCode = 0x41 | (rCode.Key << 3);
            opFuncName = string.Format("out__c__{0}", rCode.Value);
            dasm = string.Format("out (c), {0}", rCode.Value);
#>
            opcodeTableED.entries[<#= opCode #>] = new OpcodeTableEntry(<#= opFuncName #>, "<#= dasm #>", new ArgType[]{});
<#
    }
#>
            opcodeTableED.entries[0xA2] = new OpcodeTableEntry(ini, "ini", new ArgType[]{});
            opcodeTableED.entries[0xB2] = new OpcodeTableEntry(inir, "inir", new ArgType[]{});
            opcodeTableED.entries[0xAA] = new OpcodeTableEntry(ind, "ind", new ArgType[]{});
            opcodeTableED.entries[0xBA] = new OpcodeTableEntry(indr, "indr", new ArgType[]{});
            opcodeTableED.entries[0xA3] = new OpcodeTableEntry(outi, "outi", new ArgType[]{});
            opcodeTableED.entries[0xB3] = new OpcodeTableEntry(otir, "otir", new ArgType[]{});
            opcodeTableED.entries[0xAB] = new OpcodeTableEntry(outd, "outd", new ArgType[]{});
            opcodeTableED.entries[0xBB] = new OpcodeTableEntry(otdr, "otdr", new ArgType[]{});
            
            // Jumps and calls
            
            opcodeTable.entries[0xC3] = new OpcodeTableEntry(jp_nn, "jp {0}", new ArgType[]{ArgType.Word});
            opcodeTable.entries[0xCD] = new OpcodeTableEntry(call_nn, "call {0}", new ArgType[]{ArgType.Word});
            opcodeTable.entries[0x18] = new OpcodeTableEntry(jr_pc_e, "jr pc{0}", new ArgType[]{ArgType.Offset});
            
            opcodeTable.entries[0x38] = new OpcodeTableEntry(jr_c_pc_e, "jr c, pc{0}", new ArgType[]{ArgType.Offset});
            opcodeTable.entries[0x30] = new OpcodeTableEntry(jr_nc_pc_e, "jr nc, pc{0}", new ArgType[]{ArgType.Offset});
            opcodeTable.entries[0x28] = new OpcodeTableEntry(jr_z_pc_e, "jr z, pc{0}", new ArgType[]{ArgType.Offset});
            opcodeTable.entries[0x20] = new OpcodeTableEntry(jr_nz_pc_e, "jr nz, pc{0}", new ArgType[]{ArgType.Offset});
            
            opcodeTable.entries[0xE9] = new OpcodeTableEntry(jp__hl_, "jp (hl)", new ArgType[]{});
            opcodeTableDD.entries[0xE9] = new OpcodeTableEntry(jp__ix_, "jp (ix)", new ArgType[]{});
            opcodeTableFD.entries[0xE9] = new OpcodeTableEntry(jp__iy_, "jp (iy)", new ArgType[]{});
            
            opcodeTable.entries[0x10] = new OpcodeTableEntry(djnz_pc_e, "djnz pc{0}", new ArgType[]{ArgType.Offset});
            
            
<#
    foreach (var cond in Conditions) {
        opCode = 0xC2 | (cond.Key << 3);
        opFuncName = string.Format("jp_{0}_nn", cond.Value);
        dasm = string.Format("jp {0}, {{0}}", cond.Value);      
#>
            opcodeTable.entries[<#= opCode #>] = new OpcodeTableEntry(<#= opFuncName #>, "<#= dasm #>", new ArgType[]{ArgType.Word});
<#
        opCode = 0xC4 | (cond.Key << 3);
        opFuncName = string.Format("call_{0}_nn", cond.Value);
        dasm = string.Format("call {0}, {{0}}", cond.Value);      
#>
            opcodeTable.entries[<#= opCode #>] = new OpcodeTableEntry(<#= opFuncName #>, "<#= dasm #>", new ArgType[]{ArgType.Word});
<#
        opCode = 0xC0 | (cond.Key << 3);
        opFuncName = string.Format("ret_{0}", cond.Value);
        dasm = string.Format("ret {0}", cond.Value);      
#>
            opcodeTable.entries[<#= opCode #>] = new OpcodeTableEntry(<#= opFuncName #>, "<#= dasm #>", new ArgType[]{});
<#
    }
#>

            var retnDecl = new OpcodeTableEntry(retn, "retn", new ArgType[]{});
            opcodeTableED.entries[0x45] = retnDecl;                                                     
            opcodeTableED.entries[0x55] = retnDecl;                                                     
            opcodeTableED.entries[0x65] = retnDecl;                                                     
            opcodeTableED.entries[0x75] = retnDecl;                                                     
            opcodeTableED.entries[0x5D] = retnDecl;                                                     
            opcodeTableED.entries[0x6D] = retnDecl;                                                     
            opcodeTableED.entries[0x7D] = retnDecl;
            
            opcodeTableED.entries[0x4D] = new OpcodeTableEntry(reti, "reti", new ArgType[]{});                                                                                             
        }
        
        protected void nop() {
            // NOP
        }
<#  
    foreach (var dst in All8BitRegs) {
        foreach (var src in All8BitRegs) { 
#>
        protected void ld_<#= dst #>_<#= src #>() {
<# 
    if (dst != src) { 
#>
            r1.<#= dst #> = r1.<#= src #>;
<# 
    } 
#>
        }

<#
        }    
	}

    foreach (var dst in All8BitRegs) {
#>
        protected void ld_<#= dst #>_n() {
            r1.<#= dst #> = Read8(pc++);
        }

<#  
    }

    foreach (var dst in Lim8BitRegs) {
#>
        protected void ld_<#= dst #>__hl_() {
            r1.<#= dst #> = Read8(r1.hl);
        }

<#  
    }

    foreach (var src in Lim8BitRegs) {
#>
        protected void ld__hl__<#= src #>() {
            Write8(r1.hl, r1.<#= src #>);
        }

<#  
    }
#>
        protected void ld__hl__n() {
            Write8(r1.hl, Read8(pc++));
        }
        
<#  
    foreach (var reg in new string[]{"bc", "de"}) {
#>
        protected void ld_a__<#= reg #>_() {
            r1.a = Read8(r1.<#= reg #>);
        }
        
        protected void ld__<#= reg #>__a() {
            Write8(r1.<#= reg #>, r1.a);
        }
<#  
    }
#>

        protected void ld_a__nn_() {
            r1.a = Read8(Read16(pc));
            pc += 2;
        }        
        
        protected void ld__nn__a() {
            Write8(Read16(pc), r1.a);
            pc += 2;
        }
        
<#
    foreach (var reg in new string[]{"i", "r"}) {
#>
        protected void ld_a_<#= reg #>() {
            tStates++;
            r1.a = <#= reg #>;
            AdjustFlags(r1.a);
            ResFlag(f_h | f_n);
            ValFlag(f_pv, iff2);
            ValFlag(f_s, (r1.a & 0x80) != 0);
            ValFlag(f_z, r1.a == 0);
        }
        
        protected void ld_<#= reg #>_a() {
            tStates++;
            <#= reg #> = r1.a;
        }
<#    
    }

    foreach (var reg in Lim8BitRegs) {
        foreach (var iReg in Prefixes) {
#>
        protected void ld_<#= reg #>__<#= iReg.Key #>_d_() {
            tStates += 5;
            var offset = (SByte)Read8(pc++);
            r1.<#= reg #> = Read8((ushort)(r1.<#= iReg.Key #> + offset));
        }
        
        protected void ld__<#= iReg.Key #>_d__<#= reg #>() {
            tStates += 5;
            var offset = (SByte)Read8(pc++);
            Write8((ushort)(r1.<#= iReg.Key #> + offset), r1.<#= reg #>);
        }
        
<#
        }
    }

    foreach (var iReg in Prefixes) {
#>
        protected void ld__<#= iReg.Key #>_d__n() {
            tStates += 2;
            var offset = (SByte)Read8(pc++);
            var n = Read8(pc++);
            Write8((ushort)(r1.<#= iReg.Key #> + offset), n);
        }
        
<#
    }

    foreach (var reg in new string[]{"bc", "de", "hl", "sp", "ix", "iy"}) {
#>
        protected void ld_<#= reg #>_nn() {
            r1.<#= reg #> = Read16(pc);
            pc += 2;
        }
        
        protected void ld_<#= reg #>__nn_() {
            r1.<#= reg #> = Read16(Read16(pc));
            pc += 2;
        }
        
        protected void ld__nn__<#= reg #>() {
            var addr = Read16(pc);
            pc += 2;
            Write16(addr, r1.<#= reg #>);
        }
        
<#
    }

    foreach (var reg in new string[]{"hl", "ix", "iy"}) {
#>
        protected void ld_sp_<#= reg #>() {
            tStates += 2;
            r1.sp = r1.<#= reg #>;
        }
        
        protected void ex__sp__<#= reg #>() {
            tStates += 3;
            var _t = r1.<#= reg #>;
            r1.<#= reg #> = Read16(r1.sp);
            Write16(r1.sp, _t);
        }
        
<#    
    }

    foreach (var reg in new string[]{"af", "bc", "de", "hl", "ix", "iy"}) {
#>
        protected void push_<#= reg #>() {
            tStates++;
            DoPush(r1.<#= reg #>);
        }
        
        protected void pop_<#= reg #>() {
            r1.<#= reg #> = DoPop();
        }
<#    
    }
#>
        protected void ex_de_hl() {
            var _t = r1.de;
            r1.de = r1.hl;
            r1.hl = _t;
        }
        
        protected void ex_af_af_() {
            var _t = r1.af;
            r1.af = r2.af;
            r2.af = _t;
        }
        
        protected void exx() {
            ushort _t;
            
            _t = r1.bc;
            r1.bc = r2.bc;
            r2.bc = _t;
            _t = r1.de;
            r1.de = r2.de;
            r2.de = _t;
            _t = r1.hl;
            r1.hl = r2.hl;
            r2.hl= _t;
        }
        
        protected void ldi() {
            byte val, sum;
            
            tStates += 2;
            val = Read8(r1.hl++);
            Write8(r1.de++, val);
            r1.bc--;
            sum = (byte)(r1.a + val);
            ValFlag(f_5, (sum & 0x02) != 0);
            ValFlag(f_3, (sum & f_3) != 0);
            ResFlag(f_h | f_n);
            ValFlag(f_pv, r1.bc != 0);
        }
        
        protected void ldir() {
            ldi();
            if (r1.bc != 0) {
                tStates += 5;
                pc -= 2;
            }
        }

        protected void ldd() {
            byte val, sum;
            
            tStates += 2;
            val = Read8(r1.hl--);
            Write8(r1.de--, val);
            r1.bc--;
            sum = (byte)(r1.a + val);
            ValFlag(f_5, (sum & 0x02) != 0);
            ValFlag(f_3, (sum & f_3) != 0);
            ResFlag(f_h | f_n);
            ValFlag(f_pv, r1.bc != 0);
        }
        
        protected void lddr() {
            ldd();
            if (r1.bc != 0) {
                tStates += 5;
                pc -= 2;
            }
        }
        
        protected void cpi() {
            tStates += 5;
            var carry = GetFlag(f_c);
            var value = DoCPHL();
            if (GetFlag(f_h)) {
                value--;
            }
            r1.hl++;
            r1.bc--;
            ValFlag(f_pv, r1.bc != 0);
            ValFlag(f_c, carry);
            ValFlag(f_5, (value & (1 << 2)) != 0);
            ValFlag(f_3, (value & (1 << 3)) != 0);
        }
        
        protected void cpir() {
            cpi();
            if (r1.bc != 0 && !GetFlag(f_z)) {
                tStates += 5;
                pc -= 2;
            }
        }
        
        protected void cpd() {
            tStates += 5;
            var carry = GetFlag(f_c);
            var value = DoCPHL();
            if (GetFlag(f_h)) {
                value--;
            }
            r1.hl--;
            r1.bc--;
            ValFlag(f_pv, r1.bc != 0);
            ValFlag(f_c, carry);
            ValFlag(f_5, (value & (1 << 1)) != 0);
            ValFlag(f_3, (value & (1 << 3)) != 0);
        }
        
        protected void cpdr() {
            cpd();
            if (r1.bc != 0 && !GetFlag(f_z)) {
                tStates += 5;
                pc -= 2;
            }
        }
        
<#
    foreach (var cmd in new string[]{"adc", "sbc", "add", "sub"}) {
        foreach (var reg in new string[]{"a", "b", "c", "d", "e", "h", "l", "ixh", "ixl", "iyh", "iyl"}) {
#>
        protected void <#= cmd #>_a_<#= reg #>() {
            r1.a = DoArithmetics(r1.<#= reg #>, hasCarry_<#= cmd #>, isSub_<#= cmd #>);
        }
        
<#  
        }
#>
        protected void <#= cmd #>_a_n() {
            r1.a = DoArithmetics(Read8(pc++), hasCarry_<#= cmd #>, isSub_<#= cmd #>);
        }

		protected void <#= cmd #>_a__hl_() {
			r1.a = DoArithmetics(Read8(r1.hl), hasCarry_<#= cmd #>, isSub_<#= cmd #>);
		}
<#
		foreach (var reg in new string[]{"ix", "iy"}) {
#>
		protected void <#= cmd #>_a__<#= reg #>_d_() {
			tStates += 5;
			var offset = (SByte)Read8(pc++);
			r1.a = DoArithmetics(Read8((ushort)(r1.ix + offset)), hasCarry_<#= cmd #>, isSub_<#= cmd #>);
		}
<#
		}
    }

	foreach (var cmd in new string[]{"add", "adc", "sbc"}) {
		foreach (var reg in new string[]{"hl", "bc", "de", "sp"}) {
#>
		protected void <#= cmd #>_hl_<#= reg #>() {
			tStates += 7;
			r1.hl = DoAddWord(r1.hl, r1.<#= reg #>,  hasCarry_<#= cmd #>, isSub_<#= cmd #>);
		}

<#
		}
	}

	foreach (var reg1 in new string[]{"ix", "iy"}) {
		foreach (var reg2 in new string[]{"ix", "iy", "bc", "de", "sp"}) {
#>
		protected void add_<#= reg1 #>_<#= reg2 #>() {
			tStates += 7;
			r1.<#= reg1 #> = DoAddWord(r1.<#= reg1 #>, r1.<#= reg2 #>,  false, false);
		}

<#
		}
	}

    foreach (var cmd in new string[]{"and", "or", "xor"}) {
        foreach (var reg in new string[]{"a", "b", "c", "d", "e", "h", "l", "ixh", "ixl", "iyh", "iyl"}) {
#>
		protected void <#= cmd #>_<#= reg #>() {
			Do<#= cmd.ToUpper() #>(r1.<#= reg #>);
		}
        
<#
		}
#>
		protected void <#= cmd #>_n() {
			Do<#= cmd.ToUpper() #>(Read8(pc++));
		}

		protected void <#= cmd #>__hl_() {
			Do<#= cmd.ToUpper() #>(Read8(r1.hl));
		}
        
<#
		foreach (var reg in new string[]{"ix", "iy"}) {
#>
		protected void <#= cmd #>__<#= reg #>_d_() {
			tStates += 5;
			var offset = (SByte)Read8(pc++);
			Do<#= cmd.ToUpper() #>(Read8((ushort)(r1.<#= reg #> + offset)));
		}
        
<#
		}
	}
    foreach (var reg in new string[]{"a", "b", "c", "d", "e", "h", "l", "ixh", "ixl", "iyh", "iyl"}) {
#>
        protected void cp_<#= reg #>() {
            DoArithmetics(r1.<#= reg #>, false, true);
            AdjustFlags(r1.<#= reg #>);
        }
        
<#
    }
#>
        protected void cp__hl_() {
            DoCPHL();
        }
        
        protected void cp_n() {
            var value = Read8(pc++);
            DoArithmetics(value, false, true);
            AdjustFlags(value);
        }
        
<#
    foreach (var reg in new string[]{"ix", "iy"}) {
#>
        protected void cp__<#= reg #>_d_() {
            tStates += 5;
            var offset = (SByte)Read8(pc++);
            var value = Read8((ushort)(r1.<#= reg #> + offset));
            DoArithmetics(value, false, true);
            AdjustFlags(value);
        }
<#
    }
#>

<#  
    foreach (var cmd in new string[]{"inc", "dec"}) {
        foreach (var reg in new string[]{"a", "b", "c", "d", "e", "h", "l", "ixh", "ixl", "iyh", "iyl"}) {
#>
        protected void <#= cmd #>_<#= reg #>() {
            r1.<#= reg #> = DoIncDec(r1.<#= reg #>, isDec_<#= cmd #>);
        }
        
<#
        }
#>
        protected void <#= cmd #>__hl_() {
            tStates++;
            var value = Read8(r1.hl);
            Write8(r1.hl, DoIncDec(value, isDec_<#= cmd #>));
        }
<#
        foreach (var reg in new string[]{"ix", "iy"}) {
#>
        protected void <#= cmd #>__<#= reg #>_d_() {
            tStates += 6;
            var offset = (SByte)Read8(pc++);
            var addr = (ushort)(r1.<#= reg #> + offset);
            var value = Read8(addr);
            Write8(addr, DoIncDec(value, isDec_<#= cmd #>));
        }
        
<#
        }
    }
    
    foreach (var reg in new string[]{"hl", "sp", "de", "bc", "ix", "iy"}) {
#>
        protected void inc_<#= reg #>() {
            tStates += 2;
            r1.<#= reg #>++;
        }
        
        protected void dec_<#= reg #>() {
            tStates += 2;
            r1.<#= reg #>--;
        }
        
<#
    }
#>

        protected void daa() {
            DoDAA();
        }
        
        protected void cpl() {
            r1.a = (byte)~r1.a;
            SetFlag(f_h | f_n);
            AdjustFlags(r1.a);
        }
        
        protected void neg() {
            var _t = r1.a;
            r1.a = 0;
            r1.a = DoArithmetics(_t, false, true);
            SetFlag(f_n);
        }
        
        protected void ccf() {
            ValFlag(f_c, !GetFlag(f_c));
            ResFlag(f_n);
            AdjustFlags(r1.a);
        }
        
        protected void scf() {
            SetFlag(f_c);
            ResFlag(f_h | f_n);
            AdjustFlags(r1.a);
        }
        
        protected void halt() {
            halted = true;
            pc--;
        }
        
        protected void di() {
            iff1 = false;
            iff2 = false;
            deferInt = true;
        }

        protected void ei() {
            iff1 = true;
            iff2 = true;
            deferInt = true;
        }
<#
    for (var mode = 0; mode < 3; mode++) {
#>
        protected void im_<#= mode #>() {
            im = <#= mode #>;
        }
        
<#
    }
#>

        // ROTATE AND SHIFT
        
<#
    foreach (var rtt in new string[]{"rlc", "rl", "rrc", "rr"}) {
#>
        protected void <#= rtt #>a() {
            r1.a = Do<#= rtt.ToUpper() #>(r1.a, false);
        }
        
<#
        foreach (var reg in new string[]{"a", "b", "c", "d", "e", "h", "l", "ixh", "ixl", "iyh", "iyl"}) {
#>
        protected void <#= rtt #>_<#= reg #>() {
            r1.<#= reg #> = Do<#= rtt.ToUpper() #>(r1.<#= reg #>, false);
        }
        
<#
        }
#>
        protected void <#= rtt #>__hl_() {
            tStates++;
            Write8(r1.hl, Do<#= rtt.ToUpper() #>(Read8(r1.hl), true));
        }

<#
        foreach (var reg in new string[]{"ix", "iy"}) {
#>
        protected void <#= rtt #>__<#= reg #>_d_() {
            tStates += 2;
            var offset = (SByte)Read8(pc++);
            var addr = (ushort)(r1.<#= reg #> + offset);
            Write8(addr, Do<#= rtt.ToUpper() #>(Read8(addr), true));
        }
                
<#
        }
    }
    
    foreach (var shiftDir in new string[]{"sl", "sr"}) {
        foreach (var shiftType in new string[]{"a", "l"}) {
            foreach (var reg in new string[]{"a", "b", "c", "d", "e", "h", "l", "ixh", "ixl", "iyh", "iyl"}) {
#>
        protected void <#= shiftDir #><#= shiftType #>_<#= reg #>() {
            r1.<#= reg #> = Do<#= shiftDir.ToUpper() #>(r1.<#= reg #>, isArithmetics<#= shiftType.ToUpper() #>);
        }
        
<#
            }
#>
        protected void <#= shiftDir #><#= shiftType #>__hl_() {
            tStates++;
            Write8(r1.hl, Do<#= shiftDir.ToUpper() #>(Read8(r1.hl), isArithmetics<#= shiftType.ToUpper() #>));
        }

<#
            foreach (var reg in new string[]{"ix", "iy"}) {
#>
        protected void <#= shiftDir #><#= shiftType #>__<#= reg #>_d_() {
            tStates += 2;
            var offset = (SByte)Read8(pc++);
            var addr = (ushort)(r1.<#= reg #> + offset);
            Write8(addr, Do<#= shiftDir.ToUpper() #>(Read8(addr), isArithmetics<#= shiftType.ToUpper() #>));
        }
                
<#
            }
        }
    }
#>
        protected void rld() {
            tStates += 4;
            var ah = r1.a & 0x0F;
            var hl = Read8(r1.hl);
            r1.a = (byte)((r1.a & 0xF0) | ((hl & 0xF0) >> 4));
            hl = (byte)((hl << 4) | ah);
            Write8(r1.hl, hl);
            ResFlag(f_h | f_n);
            AdjustFlagsSZP(r1.a);
            AdjustFlags(r1.a);
        }
    
        protected void rrd() {
            tStates += 4;
            var ah = r1.a & 0x0F;
            var hl = Read8(r1.hl);
            r1.a = (byte)((r1.a & 0xF0) | (hl & 0x0F));
            hl = (byte)((hl >> 4) | (ah << 4));
            Write8(r1.hl, hl);
            ResFlag(f_h | f_n);
            AdjustFlagsSZP(r1.a);
        }
        
<#
    for (var b = 0; b < 8; b++) {
        foreach (var reg in new string[]{"a", "b", "c", "d", "e", "h", "l"}) {
#>
        protected void bit_<#= b #>_<#= reg #>() {
            DoBitR(<#= b #>, r1.<#= reg #>);
        }
        
<#
        }
#>
        protected void bit_<#= b #>__hl_() {
            tStates++;
            DoBitR(<#= b #>, Read8(r1.hl));
        }
        
<#      
        foreach (var reg in new string[]{"ix", "iy"}) {
#>
        protected void bit_<#= b #>__<#= reg #>_d_() {
            tStates += 2;
            var offset = (SByte)Read8(pc++);
            var addr = (ushort)(r1.<#= reg #> + offset);
            DoBitIndexed(<#= b #>, addr);
        }
        
<#
        }  
    }
#>

        // SET / RES
        
<#
    foreach (var cmd in new string[]{"set", "res"}) {
        for (var b = 0; b < 8; b++) {
            foreach (var reg in new string[]{"a", "b", "c", "d", "e", "h", "l"}) {
#>
        protected void <#= cmd #>_<#= b #>_<#= reg #>() {
            r1.<#= reg #> = DoSetRes(bitState<#= cmd.ToUpper() #>, <#= b #>, r1.<#= reg #>);
        }
        
<#
        }
#>
        protected void <#= cmd #>_<#= b #>__hl_() {
            tStates++;
            Write8(r1.hl, DoSetRes(bitState<#= cmd.ToUpper() #>, <#= b #>, Read8(r1.hl)));
        }
        
<#      
        foreach (var reg in new string[]{"ix", "iy"}) {
#>
        protected void <#= cmd #>_<#= b #>__<#= reg #>_d_() {
            tStates += 2;
            var offset = (SByte)Read8(pc++);
            var addr = (ushort)(r1.<#= reg #> + offset);
            Write8(addr, DoSetRes(bitState<#= cmd.ToUpper() #>, <#= b #>, Read8(addr)));
        }
        
<#
            }
        }  
    }
#>
        protected void in_a__n_() {
            ushort port = (ushort)Read8(pc++);
            port = (ushort)((r1.a << 8) | port);
            r1.a = IORead(port);
        }
        
        protected void out__n__a() {
            ushort port = (ushort)Read8(pc++);
            port = (ushort)((r1.a << 8) | port);
            IOWrite(port, r1.a);        
        }
        
        protected void ind() {
            tStates++;
            var value = IORead(r1.bc);
            Write8(r1.hl--, value);
            r1.b = DoIncDec(r1.b, isDec_dec);
            ValFlag(f_n, (value & 0x80) != 0);
            var fv = value + ((r1.c - 1) & 0xff);
            ValFlag(f_h, fv > 0xFF);
            ValFlag(f_c, fv > 0xFF);
            ValFlag(f_pv, parityBit[(fv & 7) ^ r1.b]);
        }
        
        protected void indr() {
            ind();
            if (r1.b != 0) {
                tStates += 5;
                pc -= 2;
            }
        }
        
        protected void ini() {
            tStates++;
            var value = IORead(r1.bc);
            Write8(r1.hl++, value);
            r1.b = DoIncDec(r1.b, isDec_dec);
            ValFlag(f_n, (value & 0x80) != 0);
            var fv = value + ((r1.c + 1) & 0xff);
            ValFlag(f_h, fv > 0xFF);
            ValFlag(f_c, fv > 0xFF);
            ValFlag(f_pv, parityBit[(fv & 7) ^ r1.b]);
        }
        
        protected void inir() {
            ini();
            if (r1.b != 0) {
                tStates += 5;
                pc -= 2;
            }
        }
        
        protected void outi() {
            tStates++;
            var value = Read8(r1.hl++);
            r1.b = DoIncDec(r1.b, isDec_dec);
            IOWrite(r1.bc, value);
            var fv = value + r1.l;
            ValFlag(f_n, (value & 0x80) != 0);
            ValFlag(f_h, fv > 0xFF);
            ValFlag(f_c, fv > 0xFF);
            ValFlag(f_pv, parityBit[(fv & 7) ^ r1.b]);
            AdjustFlags(r1.b);
        }
        
        protected void otir() {
            outi();
            if (r1.b != 0) {
                tStates += 5;
                pc -= 2;
            }
        }
        
        protected void outd() {
            tStates++;
            var value = Read8(r1.hl--);
            r1.b = DoIncDec(r1.b, isDec_dec);
            IOWrite(r1.bc, value);
            var fv = value + r1.l;
            ValFlag(f_n, (value & 0x80) != 0);
            ValFlag(f_h, fv > 0xFF);
            ValFlag(f_c, fv > 0xFF);
            ValFlag(f_pv, parityBit[(fv & 7) ^ r1.b]);
            AdjustFlags(r1.b);
        }
        
        protected void otdr() {
            outd();
            if (r1.b != 0) {
                tStates += 5;
                pc -= 2;
            }
        }
        
<#
    foreach (var reg in new string[]{"a", "b", "c", "d", "e", "f", "h", "l"}) {
#>
        protected void in_<#= reg #>__c_() {
            r1.<#= reg #> = IORead(r1.bc);
            ResFlag(f_h | f_n);
            AdjustFlagsSZP(r1.<#= reg #>);
            AdjustFlags(r1.<#= reg #>);
        }    

<#
        if (reg != "f") {
#>
        protected void out__c__<#= reg #>() {
            IOWrite(r1.bc, r1.<#= reg #>);
        }
        
<#
        }
    }       
#>      
        protected void out__c__0() {
            IOWrite(r1.bc, 0);
        }
        
        protected void jp_nn() {
            pc = Read16(pc);
        }
        
        protected void jr_pc_e() {
            var offset = (SByte)Read8(pc++);
            tStates += 5;
            pc = (ushort)(pc + offset);
        }
        
        protected void djnz_pc_e() {
            tStates++;
            var offset = (SByte)Read8(pc++);
            r1.b--;
            if (r1.b != 0) {
                tStates += 5;
                pc = (ushort)(pc + offset);
            }
        }
        
        protected void call_nn() {
            var addr = Read16(pc);
            pc += 2;
            tStates++;
            DoPush(pc);
            pc = addr;
        }
        
        protected void ret() {
            pc = DoPop();
        }
        
        protected void retn() {
            iff1 = iff2;
            ret();
        }
        
        protected void reti() {
            iff1 = iff2;
            ret();
        }
        
<#
    foreach (var cond in Conditions) {
#>
        protected void jp_<#= cond.Value #>_nn() {
            // no matter if the condition is true we spend 6 tstates to read the addr
            ushort addr = Read16(pc);
            if (Condition(c_<#= cond.Value #>)) {
                pc = addr;
            } else {
                pc += 2;
            }
        }
        
        protected void call_<#= cond.Value #>_nn() {
            var addr = Read16(pc);
            pc += 2;
            if (Condition(c_<#= cond.Value #>)) {
                tStates++;
                DoPush(pc);
                pc = addr;
            }
        }
        
        protected void ret_<#= cond.Value #>() {
            tStates++;
            if (Condition(c_<#= cond.Value #>)) {
                ret();
            }
        }
        
<#
    }
#>
<#
    foreach (var cond in new string[]{"c", "nc", "z", "nz"}) {
#>
        protected void jr_<#= cond #>_pc_e() {
            var offset = (SByte)Read8(pc++);
            if (Condition(c_<#= cond #>)) {
                tStates += 5;
                pc = (ushort)(pc + offset);
            }
        }
        
<#
    }
#>
<#
    foreach (var reg in new string[]{"hl", "ix", "iy"}) {
#>
        protected void jp__<#= reg #>_() {
            pc = r1.<#= reg #>;
        }
        
<#
    }
#>
    }
}