<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<# 
Dictionary<int, string> RegisterMap = new Dictionary<int, string>{
    {0, "b"},
    {1, "c"},
    {2, "d"},
    {3, "e"},
    {4, "h"},
    {5, "l"},
    {7, "a"},
};

Dictionary<int, string> Register16Map = new Dictionary<int, string>{
    {0, "bc"},
    {1, "de"},
    {2, "hl"},
    {3, "sp"}
};

Dictionary<int, string> Register16Map2 = new Dictionary<int, string>{
    {0, "bc"},
    {1, "de"},
    {2, "hl"},
    {3, "af"}
};

string[] All8BitRegs = new string[11] {
    "a", "b", "c", "d", "e", "h", "l", "ixh", "ixl", "iyh", "iyl"
};

string[] Lim8BitRegs = new string[7] {
    "a", "b", "c", "d", "e", "h", "l"
};

Dictionary<string, int> Prefixes = new Dictionary<string, int>{
    {"ix", 0xDD},
    {"iy", 0xFD}
};
#>
using System;

namespace Z80 {
    public class Cpu: BaseCpu {

        public Cpu(IMemory mem) : base(mem) {
            
        }

        protected override void CreateTables() {
            base.CreateTables();

            // LD r, r'
<#  
    foreach (var dst in RegisterMap) {
        foreach (var src in RegisterMap) { 
            var opCode = 0x40 | (dst.Key << 3) | src.Key;
            var srcRegName = src.Value;
            var dstRegName = dst.Value;
            var opFuncName = string.Format("ld_{0}_{1}", dstRegName, srcRegName);
            var dasm = string.Format("ld {0}, {1}", dstRegName, srcRegName);
#>
            opcodeTable.entries[<#= opCode #>] = new OpcodeTableEntry(<#= opFuncName #>, "<#= dasm #>", new ArgType[]{});
<#  
        }
    } 
#>
            // NOP
            opcodeTable.entries[0x00] = new OpcodeTableEntry(nop, "nop", new ArgType[]{});

            // LD r, n
<#  
    foreach (var dst in RegisterMap) {
        var opCode = 0x06 | (dst.Key << 3);
        var opFuncName = string.Format("ld_{0}_n", dst.Value);
        var dasm = string.Format("ld {0}, {{0}}", dst.Value);
#>
            opcodeTable.entries[<#= opCode #>] = new OpcodeTableEntry(<#= opFuncName #>, "<#= dasm #>", new ArgType[]{ArgType.Byte});
<#  
    }
#>
            opcodeTableDD.entries[0x26] = new OpcodeTableEntry(ld_ixh_n, "ld ixh, {0}", new ArgType[]{ArgType.Byte});
            opcodeTableDD.entries[0x2e] = new OpcodeTableEntry(ld_ixl_n, "ld ixl, {0}", new ArgType[]{ArgType.Byte});
            opcodeTableFD.entries[0x26] = new OpcodeTableEntry(ld_iyh_n, "ld iyh, {0}", new ArgType[]{ArgType.Byte});
            opcodeTableFD.entries[0x2e] = new OpcodeTableEntry(ld_iyl_n, "ld iyl, {0}", new ArgType[]{ArgType.Byte});
            
            // LD r, (HL)
<#
    foreach (var dst in RegisterMap) {
        var opCode = 0x46 | (dst.Key << 3);
        var opFuncName = string.Format("ld_{0}__hl_", dst.Value);
        var dasm = string.Format("ld {0}, (hl)", dst.Value);
#>
            opcodeTable.entries[<#= opCode #>] = new OpcodeTableEntry(<#= opFuncName #>, "<#= dasm #>", new ArgType[]{});
<#
    }
#>

            // LD (HL), r
<#
    foreach (var src in RegisterMap) {
        var opCode = 0x70 | src.Key;
        var opFuncName = string.Format("ld__hl__{0}", src.Value);
        var dasm = string.Format("ld (hl), {0}", src.Value);
#>
            opcodeTable.entries[<#= opCode #>] = new OpcodeTableEntry(<#= opFuncName #>, "<#= dasm #>", new ArgType[]{});
<#
    }
#>
            opcodeTable.entries[0x36] = new OpcodeTableEntry(ld__hl__n, "ld (hl), n", new ArgType[]{ArgType.Byte});
            
            // LD (DE/BC), A; LD A, (DE/BC)
            opcodeTable.entries[0x0A] = new OpcodeTableEntry(ld_a__bc_, "ld a, (bc)", new ArgType[]{});
            opcodeTable.entries[0x1A] = new OpcodeTableEntry(ld_a__de_, "ld a, (de)", new ArgType[]{});
            opcodeTable.entries[0x02] = new OpcodeTableEntry(ld__bc__a, "ld (bc), a", new ArgType[]{});
            opcodeTable.entries[0x12] = new OpcodeTableEntry(ld__de__a, "ld (de), a", new ArgType[]{});
            
            // LD A, (nn); LD (nn), A
            opcodeTable.entries[0x3A] = new OpcodeTableEntry(ld_a__nn_, "ld a, ({0})", new ArgType[]{ArgType.Word});
            opcodeTable.entries[0x32] = new OpcodeTableEntry(ld__nn__a, "ld ({0}), a", new ArgType[]{ArgType.Word});
            
            // LD A, R/I; LD R/I, A
            opcodeTableED.entries[0x57] = new OpcodeTableEntry(ld_a_i, "ld a, i", new ArgType[]{});
            opcodeTableED.entries[0x5F] = new OpcodeTableEntry(ld_a_r, "ld a, r", new ArgType[]{});
            opcodeTableED.entries[0x47] = new OpcodeTableEntry(ld_i_a, "ld i, a", new ArgType[]{});
            opcodeTableED.entries[0x4F] = new OpcodeTableEntry(ld_r_a, "ld r, a", new ArgType[]{});
            
            // Indexed 8 bit load
<#
    foreach (var dst in RegisterMap) {
        var opCode = 0x46 | (dst.Key << 3);
        foreach (var iReg in Prefixes) {
            var opFuncName = string.Format("ld_{0}__{1}_d_", dst.Value, iReg.Key);
            var dasm = string.Format("ld {0}, ({1}+{{0}})", dst.Value, iReg.Key);
#>
            opcodeTable.entries[<#= iReg.Value #>].nextTable.entries[<#= opCode #>] = 
                new OpcodeTableEntry(<#= opFuncName #>, "<#= dasm #>", new ArgType[]{ArgType.Offset});
<#
        }
    }
#>
<#
    foreach (var src in RegisterMap) {
        var opCode = 0x70 | src.Key;
        foreach (var iReg in Prefixes) {
            var opFuncName = string.Format("ld__{1}_d__{0}", src.Value, iReg.Key);
            var dasm = string.Format("ld ({1}+{{0}}), {0}", src.Value, iReg.Key);
#>
            opcodeTable.entries[<#= iReg.Value #>].nextTable.entries[<#= opCode #>] = 
                new OpcodeTableEntry(<#= opFuncName #>, "<#= dasm #>", new ArgType[]{ArgType.Offset});
<#
        }
    }
#>
<#
    foreach (var iReg in Prefixes) {
        var opFuncName = string.Format("ld__{0}_d__n", iReg.Key);
        var dasm = string.Format("ld ({0}+{{0}}), {{1}}", iReg.Key);
#>
            opcodeTable.entries[<#= iReg.Value #>].nextTable.entries[0x36] =
                new OpcodeTableEntry(<#= opFuncName #>, "<#= dasm #>", new ArgType[]{ArgType.Offset, ArgType.Byte});
<#    
    }
#>

            // LD dd, nn
<#
    foreach (var rCode in Register16Map) {
        var opCode = 1 | (rCode.Key << 4);
        var opFuncName = string.Format("ld_{0}_nn", rCode.Value);
        var dasm = string.Format("ld {0}, {{0}}", rCode.Value);
#>
            opcodeTable.entries[<#= opCode #>] = new OpcodeTableEntry(<#= opFuncName #>, "<#= dasm #>", new ArgType[]{ArgType.Word});
<#
    }
#>

<#
    foreach (var iReg in Prefixes) {
        var opFuncName = string.Format("ld_{0}_nn", iReg.Key);
        var dasm = string.Format("ld {0}, {{0}}", iReg.Key);
#>
            opcodeTable.entries[<#= iReg.Value #>].nextTable.entries[0x21] =
                new OpcodeTableEntry(<#= opFuncName #>, "<#= dasm #>", new ArgType[]{ArgType.Word});
<#
    }
#>

            // LD dd, (nn)
<#
    foreach (var rCode in Register16Map) {
        var opCode = 0x4B | (rCode.Key << 4);
        var opFuncName = string.Format("ld_{0}__nn_", rCode.Value);
        var dasm = string.Format("ld {0}, ({{0}})", rCode.Value);
#>
            opcodeTableED.entries[<#= opCode #>] = new OpcodeTableEntry(<#= opFuncName #>, "<#= dasm #>", new ArgType[]{ArgType.Word});
<#
    }
#>

            opcodeTable.entries[0x2A] = new OpcodeTableEntry(ld_hl__nn_, "ld hl, ({0})", new ArgType[]{ArgType.Word});
<#
    foreach (var iReg in Prefixes) {
        var opFuncName = string.Format("ld_{0}__nn_", iReg.Key);
        var dasm = string.Format("ld {0}, ({{0}})", iReg.Key);
#>
            opcodeTable.entries[<#= iReg.Value #>].nextTable.entries[0x2A] =
                new OpcodeTableEntry(<#= opFuncName #>, "<#= dasm #>", new ArgType[]{ArgType.Word});
<#
    }
#>

            // LD (nn), dd
<#
    foreach (var rCode in Register16Map) {
        var opCode = 0x43 | (rCode.Key << 4);
        var opFuncName = string.Format("ld__nn__{0}", rCode.Value);
        var dasm = string.Format("ld ({{0}}), {0}", rCode.Value);
#>
            opcodeTableED.entries[<#= opCode #>] = new OpcodeTableEntry(<#= opFuncName #>, "<#= dasm #>", new ArgType[]{ArgType.Word});
<#
    }
#>

            opcodeTable.entries[0x22] = new OpcodeTableEntry(ld__nn__hl, "ld ({0}), hl", new ArgType[]{ArgType.Word});
<#
    foreach (var iReg in Prefixes) {
        var opFuncName = string.Format("ld__nn__{0}", iReg.Key);
        var dasm = string.Format("ld ({{0}}), {0}", iReg.Key);
#>
            opcodeTable.entries[<#= iReg.Value #>].nextTable.entries[0x22] =
                new OpcodeTableEntry(<#= opFuncName #>, "<#= dasm #>", new ArgType[]{ArgType.Word});
<#
    }
#>
            opcodeTable.entries[0xF9] = new OpcodeTableEntry(ld_sp_hl, "ld sp, hl", new ArgType[]{});
            opcodeTableDD.entries[0xF9] = new OpcodeTableEntry(ld_sp_ix, "ld sp, ix", new ArgType[]{});
            opcodeTableFD.entries[0xF9] = new OpcodeTableEntry(ld_sp_iy, "ld sp, iy", new ArgType[]{});
            
<#
    foreach (var rCode in Register16Map2) {
        var opCode = 0xC5 | (rCode.Key << 4);
        var opFuncName = string.Format("push_{0}", rCode.Value);
        var dasm = string.Format("push {0}", rCode.Value);
#>
            opcodeTable.entries[<#= opCode #>] = new OpcodeTableEntry(<#= opFuncName #>, "<#= dasm #>", new ArgType[]{});
<#  
        opCode = 0xC1 | (rCode.Key << 4);
        opFuncName = string.Format("pop_{0}", rCode.Value);
        dasm = string.Format("pop {0}", rCode.Value);
#>
            opcodeTable.entries[<#= opCode #>] = new OpcodeTableEntry(<#= opFuncName #>, "<#= dasm #>", new ArgType[]{});
<#
    }
#>
<#
    foreach (var iReg in Prefixes) {
        var opFuncName = string.Format("push_{0}", iReg.Key);
        var dasm = string.Format("push {0}", iReg.Key);
#>
            opcodeTable.entries[<#= iReg.Value #>].nextTable.entries[0xE5] =
                new OpcodeTableEntry(<#= opFuncName #>, "<#= dasm #>", new ArgType[]{});
<#
        opFuncName = string.Format("pop_{0}", iReg.Key);
        dasm = string.Format("pop {0}", iReg.Key);
#>
            opcodeTable.entries[<#= iReg.Value #>].nextTable.entries[0xE1] =
                new OpcodeTableEntry(<#= opFuncName #>, "<#= dasm #>", new ArgType[]{});
<#
    }
#>            
            opcodeTable.entries[0xEB] = new OpcodeTableEntry(ex_de_hl, "ex de, hl", new ArgType[]{});
            opcodeTable.entries[0x08] = new OpcodeTableEntry(ex_af_af_, "ex af, af'", new ArgType[]{});
            opcodeTable.entries[0xD9] = new OpcodeTableEntry(exx, "exx", new ArgType[]{});
            opcodeTable.entries[0xE3] = new OpcodeTableEntry(ex__sp__hl, "ex (sp), hl", new ArgType[]{});
            opcodeTableDD.entries[0xE3] = new OpcodeTableEntry(ex__sp__ix, "ex (sp), ix", new ArgType[]{});
            opcodeTableFD.entries[0xE3] = new OpcodeTableEntry(ex__sp__iy, "ex (sp), iy", new ArgType[]{});
            
            opcodeTableED.entries[0xA0] = new OpcodeTableEntry(ldi, "ldi", new ArgType[] { });
            opcodeTableED.entries[0xB0] = new OpcodeTableEntry(ldir, "ldir", new ArgType[] { });
            opcodeTableED.entries[0xA8] = new OpcodeTableEntry(ldd, "ldd", new ArgType[] { });
            opcodeTableED.entries[0xB8] = new OpcodeTableEntry(lddr, "lddr", new ArgType[] { });
            opcodeTableED.entries[0xA1] = new OpcodeTableEntry(cpi, "cpi", new ArgType[] { });
            opcodeTableED.entries[0xB1] = new OpcodeTableEntry(cpir, "cpir", new ArgType[] { });
            opcodeTableED.entries[0xA9] = new OpcodeTableEntry(cpd, "cpd", new ArgType[] { });
            opcodeTableED.entries[0xB9] = new OpcodeTableEntry(cpdr, "cpdr", new ArgType[] { });

        }
        
        protected void nop() {
            // NOP
        }
<#  
    foreach (var dst in All8BitRegs) {
        foreach (var src in All8BitRegs) { 
#>
        protected void ld_<#= dst #>_<#= src #>() {
<# 
    if (dst != src) { 
#>
            r1.<#= dst #> = r1.<#= src #>;
<# 
    } 
#>
        }

<#
        }    
}
#>

<#  
    foreach (var dst in All8BitRegs) {
#>
        protected void ld_<#= dst #>_n() {
            r1.<#= dst #> = Read8(pc++);
        }

<#  
    }
#>

<#  
    foreach (var dst in Lim8BitRegs) {
#>
        protected void ld_<#= dst #>__hl_() {
            r1.<#= dst #> = Read8(r1.hl);
        }

<#  
    }
#>

<#  
    foreach (var src in Lim8BitRegs) {
#>
        protected void ld__hl__<#= src #>() {
            Write8(r1.hl, r1.<#= src #>);
        }

<#  
    }
#>
        protected void ld__hl__n() {
            Write8(r1.hl, Read8(pc++));
        }
        
<#  
    foreach (var reg in new string[]{"bc", "de"}) {
#>
        protected void ld_a__<#= reg #>_() {
            r1.a = Read8(r1.<#= reg #>);
        }
        
        protected void ld__<#= reg #>__a() {
            Write8(r1.<#= reg #>, r1.a);
        }
<#  
    }
#>

        protected void ld_a__nn_() {
            r1.a = Read8(Read16(pc));
            pc += 2;
        }        
        
        protected void ld__nn__a() {
            Write8(Read16(pc), r1.a);
            pc += 2;
        }
        
<#
    foreach (var reg in new string[]{"i", "r"}) {
#>
        protected void ld_a_<#= reg #>() {
            tStates++;
            r1.a = <#= reg #>;
            AdjustFlags(r1.a);
            ResFlag(f_h | f_n);
            ValFlag(f_pv, iff2);
            ValFlag(f_s, (r1.a & 0x80) != 0);
            ValFlag(f_z, r1.a == 0);
        }
        
        protected void ld_<#= reg #>_a() {
            tStates++;
            <#= reg #> = r1.a;
        }
<#    
    }
#>    

<#
    foreach (var reg in Lim8BitRegs) {
        foreach (var iReg in Prefixes) {
#>
        protected void ld_<#= reg #>__<#= iReg.Key #>_d_() {
            tStates += 5;
            var offset = (SByte)Read8(pc++);
            r1.<#= reg #> = Read8((ushort)(r1.<#= iReg.Key #> + offset));
        }
        
        protected void ld__<#= iReg.Key #>_d__<#= reg #>() {
            tStates += 5;
            var offset = (SByte)Read8(pc++);
            Write8((ushort)(r1.<#= iReg.Key #> + offset), r1.<#= reg #>);
        }
        
<#
        }
    }
#>

<#
    foreach (var iReg in Prefixes) {
#>
        protected void ld__<#= iReg.Key #>_d__n() {
            tStates += 2;
            var offset = (SByte)Read8(pc++);
            var n = Read8(pc++);
            Write8((ushort)(r1.<#= iReg.Key #> + offset), n);
        }
        
<#
    }
#>

<#
    foreach (var reg in new string[]{"bc", "de", "hl", "sp", "ix", "iy"}) {
#>
        protected void ld_<#= reg #>_nn() {
            r1.<#= reg #> = Read16(pc);
            pc += 2;
        }
        
        protected void ld_<#= reg #>__nn_() {
            r1.<#= reg #> = Read16(Read16(pc));
            pc += 2;
        }
        
        protected void ld__nn__<#= reg #>() {
            var addr = Read16(pc);
            pc += 2;
            Write16(addr, r1.<#= reg #>);
        }
        
<#
    }
#>

<#
    foreach (var reg in new string[]{"hl", "ix", "iy"}) {
#>
        protected void ld_sp_<#= reg #>() {
            tStates += 2;
            r1.sp = r1.<#= reg #>;
        }
        
        protected void ex__sp__<#= reg #>() {
            tStates += 3;
            var _t = r1.<#= reg #>;
            r1.<#= reg #> = Read16(r1.sp);
            Write16(r1.sp, _t);
        }
        
<#    
    }
#>

<#
    foreach (var reg in new string[]{"af", "bc", "de", "hl", "ix", "iy"}) {
#>
        protected void push_<#= reg #>() {
            tStates++;
            DoPush(r1.<#= reg #>);
        }
        
        protected void pop_<#= reg #>() {
            r1.<#= reg #> = DoPop();
        }
<#    
    }
#>
        protected void ex_de_hl() {
            var _t = r1.de;
            r1.de = r1.hl;
            r1.hl = _t;
        }
        
        protected void ex_af_af_() {
            var _t = r1.af;
            r1.af = r2.af;
            r2.af = _t;
        }
        
        protected void exx() {
            ushort _t;
            
            _t = r1.bc;
            r1.bc = r2.bc;
            r2.bc = _t;
            _t = r1.de;
            r1.de = r2.de;
            r2.de = _t;
            _t = r1.hl;
            r1.hl = r2.hl;
            r2.hl= _t;
        }
        
        protected void ldi() {
            byte val, sum;
            
            tStates += 2;
            val = Read8(r1.hl++);
            Write8(r1.de++, val);
            r1.bc--;
            sum = (byte)(r1.a + val);
            ValFlag(f_5, (sum & 0x02) != 0);
            ValFlag(f_3, (sum & f_3) != 0);
            ResFlag(f_h | f_n);
            ValFlag(f_pv, r1.bc != 0);
        }
        
        protected void ldir() {
            ldi();
            if (r1.bc != 0) {
                tStates += 5;
                pc -= 2;
            }
        }

        protected void ldd() {
            byte val, sum;
            
            tStates += 2;
            val = Read8(r1.hl--);
            Write8(r1.de--, val);
            r1.bc--;
            sum = (byte)(r1.a + val);
            ValFlag(f_5, (sum & 0x02) != 0);
            ValFlag(f_3, (sum & f_3) != 0);
            ResFlag(f_h | f_n);
            ValFlag(f_pv, r1.bc != 0);
        }
        
        protected void lddr() {
            ldd();
            if (r1.bc != 0) {
                tStates += 5;
                pc -= 2;
            }
        }
        
        protected void cpi() {
            tStates += 5;
            var carry = GetFlag(f_c);
            var value = DoCPHL();
            if (GetFlag(f_h)) {
                value--;
            }
            r1.hl++;
            r1.bc--;
            ValFlag(f_pv, r1.bc != 0);
            ValFlag(f_c, carry);
            ValFlag(f_5, (value & (1 << 2)) != 0);
            ValFlag(f_3, (value & (1 << 3)) != 0);
        }
        
        protected void cpir() {
            cpi();
            if (r1.bc != 0 && !GetFlag(f_z)) {
                tStates += 5;
                pc -= 2;
            }
        }
        
        protected void cpd() {
            tStates += 5;
            var carry = GetFlag(f_c);
            var value = DoCPHL();
            if (GetFlag(f_h)) {
                value--;
            }
            r1.hl--;
            r1.bc--;
            ValFlag(f_pv, r1.bc != 0);
            ValFlag(f_c, carry);
            ValFlag(f_5, (value & (1 << 1)) != 0);
            ValFlag(f_3, (value & (1 << 3)) != 0);
        }
        
        protected void cpdr() {
            cpd();
            if (r1.bc != 0 && !GetFlag(f_z)) {
                tStates += 5;
                pc -= 2;
            }
        }
        
    }
}