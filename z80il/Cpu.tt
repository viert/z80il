<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<# 
Dictionary<int, string> RegisterMap = new Dictionary<int, string>();
RegisterMap[0] = "b";
RegisterMap[1] = "c";
RegisterMap[2] = "d";
RegisterMap[3] = "e";
RegisterMap[4] = "h";
RegisterMap[5] = "l";
RegisterMap[7] = "a";

string[] All8BitRegs = new string[11] {
    "a", "b", "c", "d", "e", "h", "l", "ixh", "ixl", "iyh", "iyl"
};
#>
using System;

namespace Z80 {
    public class Cpu: BaseCpu {

        public Cpu(IMemory mem) : base(mem) {
            
        }

        protected override void CreateTables() {
            base.CreateTables();

            // LD r, r'
<#  foreach (var dst in RegisterMap) {
        foreach (var src in RegisterMap) { 
            var opCode = 0x40 | (dst.Key << 3) | src.Key;
            var srcRegName = src.Value;
            var dstRegName = dst.Value;
            var opFuncName = string.Format("ld_{0}_{1}", dstRegName, srcRegName);
            var dasm = string.Format("ld {0}, {1}", dstRegName, srcRegName);
#>
            opcodeTable.entries[<#= opCode #>] = new OpcodeTableEntry(<#= opFuncName #>, "<#= dasm #>", new ArgType[0]);
<#      }
    } #> 
        }

<#  foreach (var dst in All8BitRegs) {
        foreach (var src in All8BitRegs) { 
#>
        protected void ld_<#= dst #>_<#= src #>() {
<# if (dst != src) { #>
            r1.<#= dst #> = r1.<#= src #>;
<# } #>
        }

<#
        }    
}
#>

    }
}